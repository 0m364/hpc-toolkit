# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: "Setup Integration tests for HPC toolkit"
  hosts: all,localhost
  vars:
    scripts_dir: "{{ workspace }}/tools/cloud-build/daily-tests"
    blueprint_yaml: "{{ workspace }}/examples/hpc-cluster-high-io.yaml"
    blueprint_dir: "{{ workspace }}/hpc-cluster-high-io/primary"
  tasks:
  ## Create SSH Keys
  - name: Create SSH Key
    openssh_keypair:
      path: "{{ workspace }}/id_rsa"

  ## Create cluster
  - name: Create blueprint
    command: "{{ scripts_dir }}/create_blueprint.sh"
    environment:
      EXAMPLE_YAML: "{{ blueprint_yaml }}"
      PROJECT_ID: "{{ project }}"
      ROOT_DIR: "{{ workspace }}"
    args:
      creates: "{{ blueprint_dir }}"
  - name: Create Infrastructure and test
    block:
    - name: Create Cluster
      become: false
      command: "{{ scripts_dir }}/create_cluster.sh"
      args:
        creates: "{{ blueprint_dir }}/.terraform"
      register: login_ip
      environment:
        BLUEPRINT_DIR: "{{ blueprint_dir }}"
        LOGIN_NAME: "{{ login_node }}"
        ROOT_DIR: "{{ workspace }}"
    - name: Get login IP
      become: false
      register: login_ip
      command: gcloud compute instances describe --zone={{ zone }} {{ login_node }} --format='get(networkInterfaces[0].accessConfigs[0].natIP)'

    ## Setup firewall for cloud build
    - name: Get Builder IP
      shell: dig TXT +short o-o.myaddr.l.google.com @ns1.google.com | awk -F'"' '{print $2}'
      register: build_ip
    - name: Create firewall rule
      command:
        argv:
        - gcloud
        - compute
        - --project={{ project }}
        - firewall-rules
        - create
        - "build-{{ build_id }}"
        - --direction=INGRESS
        - --priority=1000
        - --network={{ network }}
        - --action=ALLOW
        - --rules=tcp:22
        - --source-ranges={{ build_ip.stdout }}
    - name: 'Add SSH Keys to OS-Login'
      command:
        argv:
        - gcloud
        - compute
        - os-login
        - ssh-keys
        - add
        - --ttl
        - 2h
        - "--key-file={{ workspace }}/id_rsa.pub"
    - name: Add Login node as host
      add_host:
        hostname: "{{ login_ip.stdout }}"
        groups: [remote_host]
    - name: Wait for cluster
      wait_for_connection:

    ## Cleanup and fail gracefully
    rescue:
    - name: Tear Down Cluster
      run_once: true
      delegate_to: localhost
      command:
        cmd: terraform destroy -auto-approve
        chdir: "{{ blueprint_dir }}"
    - name: Delete Firewall Rule
      command:
        argv:
        - gcloud
        - compute
        - firewall-rules
        - delete
        - build-{{ build_id }}
    - name: Fail Out
      fail:
        msg: "Failed while setting up test infrastructure"
      when: true

- name: Run Integration Tests
  hosts: remote_host
  vars:
    blueprint_dir: "{{ workspace }}/hpc-cluster-high-io/primary"
    ansible_ssh_private_key_file: id_rsa
  gather_facts: no
  tasks:
  - name: Slurm Test Block
    block:
    - name: Pause for 2 minutes to allow cluster setup
      pause:
        minutes: 2
    - name: "Run Integration tests for HPC toolkit"
      include_tasks: slurm-tests.yml
      run_once: true
      vars:
        partitions:
        - compute
        mounts:
        - /home
        - /scratch

    ## Always cleanup, even on failure
    always:
    - name: Tear Down Cluster
      run_once: true
      delegate_to: localhost
      command:
        cmd: terraform destroy -auto-approve
        chdir: "{{ blueprint_dir }}"
    - name: Delete Firewall Rule
      run_once: true
      delegate_to: localhost
      command:
        argv:
        - gcloud
        - compute
        - firewall-rules
        - delete
        - "build-{{ build_id }}"
