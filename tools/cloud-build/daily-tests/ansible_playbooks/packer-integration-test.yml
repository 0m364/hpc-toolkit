# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

- name: "Packer Integration test for HPC toolkit"
  hosts: localhost
  tasks:
  ## Create Deployment
  - name: Create Deployment Directory
    ansible.builtin.include_tasks:
      file: tasks/create_deployment_directory.yml
  - name: Create Infrastructure and test
    block:
    - name: Create Network with Terraform
      register: network
      changed_when: network.changed
      ansible.builtin.command: "{{ item }}"
      args:
        chdir: "{{ workspace }}/{{ deployment_name }}/builder-env"
        creates: "{{ workspace }}/{{ deployment_name }}/.terraform"
      environment:
        TF_IN_AUTOMATION: "TRUE"
      loop:
      - terraform init
      - terraform validate
      - terraform apply -auto-approve -no-color
    - name: Apply terraform startup-script to packer module
      register: export_import
      changed_when: export_import.changed
      ansible.builtin.command: "{{ item }}"
      args:
        chdir: "{{ workspace }}"
      loop:
      - ./ghpc export-outputs {{ deployment_name }}/builder-env
      - ./ghpc import-inputs {{ deployment_name }}/packer
    - name: Create VM image with Packer
      register: image_creation
      changed_when: image_creation.changed
      ansible.builtin.command: "{{ item }}"
      args:
        chdir: "{{ workspace }}/{{ deployment_name }}/packer/custom-image"
      loop:
      - packer init .
      - packer validate .
      - packer build .
      notify:
      - Delete VM Image
    always:
    - name: Tear Down Network
      register: terraform_destroy
      changed_when: terraform_destroy.changed
      ansible.builtin.command: terraform destroy -auto-approve -no-color
      args:
        chdir: "{{ workspace }}/{{ deployment_name }}/builder-env"
      environment:
        TF_IN_AUTOMATION: "TRUE"
  handlers:
  - name: Delete VM Image
    register: image_deletion
    changed_when: image_deletion.changed
    ansible.builtin.shell: |
      set -e -o pipefail
      gcloud compute images delete --project={{ project }} --quiet $(jq -r '.builds[-1].artifact_id' packer-manifest.json | cut -d ":" -f2)
    args:
      chdir: "{{ workspace }}/{{ deployment_name }}/packer/custom-image"
      executable: /bin/bash
