# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: Configure HTCondor Role
  hosts: localhost
  become: true
  vars:
    condor_config_root: /etc/condor
    role_file: 00-role
    pool_file: 01-pool
    cm_config_file: 02-central-manager
    cm_ha_config_file: 02-central-manager-high-availability
    schedd_config_file: 02-schedd
    execute_config_file: 02-execute
  tasks:
  - name: User must supply HTCondor role
    ansible.builtin.assert:
      that:
      - htcondor_central_manager_ips is defined
      - htcondor_role is defined
      - password_id is defined
      - project_id is defined
  - name: Set Trust Domain
    ansible.builtin.set_fact:
      trust_domain: c.{{ project_id }}.internal
  - name: Set HTCondor Pool password (token signing key)
    ansible.builtin.shell: |
      set -e -o pipefail
      export CLOUDSDK_PYTHON=/usr/bin/python
      POOL_PASSWORD=$(gcloud secrets versions access latest --secret={{ password_id }})
      echo -n "$POOL_PASSWORD" | sh -c "condor_store_cred add -c -i -"
    args:
      creates: "{{ condor_config_root }}/passwords.d/POOL"
  - name: Remove default HTCondor configuration
    ansible.builtin.file:
      path: "{{ condor_config_root }}/config.d/00-htcondor-9.0.config"
      state: absent
    notify:
    - Reload HTCondor
  - name: Set HTCondor role on all hosts
    ansible.builtin.copy:
      dest: "{{ condor_config_root }}/config.d/{{ role_file }}"
      mode: 0644
      content: |
        use role:{{ htcondor_role }}
    notify:
    - Reload HTCondor
  - name: Set HTCondor Central Manager and trust domain on all hosts
    ansible.builtin.copy:
      dest: "{{ condor_config_root }}/config.d/{{ pool_file }}"
      mode: 0644
      content: |
        CONDOR_HOST={{ htcondor_central_manager_ips }}
        UID_DOMAIN={{ trust_domain }}
        TRUST_DOMAIN={{ trust_domain }}
    notify:
    - Reload HTCondor
  - name: Configure HTCondor Central Manager
    when: htcondor_role == 'get_htcondor_central_manager'
    block:
    - name: Create IDTOKEN for Central Manager
      ansible.builtin.shell: |
        umask 0077
        TRUST_DOMAIN=$(condor_config_val TRUST_DOMAIN)
        # do not restrict Central Manager authz scopes!
        condor_token_create -identity condor@{{ trust_domain }} \
          -token condor@{{ trust_domain }}
      args:
        creates: "{{ condor_config_root }}/tokens.d/condor@{{ trust_domain }}"
    - name: Generate list of Central Managers
      ansible.builtin.set_fact:
        central_manager_list: "{{ htcondor_central_manager_ips | split(',') }}"
    - name: Create Central Manager standard configuration file
      when: central_manager_list | length > 1
      ansible.builtin.copy:
        dest: "{{ condor_config_root }}/config.d/{{ cm_config_file }}"
        mode: 0644
        content: |
          COLLECTOR_UPDATE_INTERVAL=60
          NEGOTIATOR_UPDATE_INTERVAL=60
    - name: Create Central Manager HA configuration file
      when: central_manager_list | length > 1
      ansible.builtin.copy:
        dest: "{{ condor_config_root }}/config.d/{{ cm_ha_config_file }}"
        mode: 0644
        content: |
          # following https://htcondor.readthedocs.io/en/latest/admin-manual/high-availability.html#high-availability-of-the-central-manager
          CM_LIST = \
            {{ central_manager_list[0] }}:$(SHARED_PORT_PORT), \
            {{ central_manager_list[1] }}:$(SHARED_PORT_PORT)

          HAD_USE_SHARED_PORT=True
          HAD_LIST=$(CM_LIST)

          REPLICATION_USE_SHARED_PORT=True
          REPLICATION_LIST=$(CM_LIST)

          HAD_USE_PRIMARY=True
          HAD_CONTROLLEE=NEGOTIATOR
          MASTER_NEGOTIATOR_CONTROLLER=HAD

          DAEMON_LIST=$(DAEMON_LIST), HAD, REPLICATION
          HAD_USE_REPLICATION=True
          MASTER_HAD_BACKOFF_CONSTANT=360
      notify:
      - Reload HTCondor
    - name: Remove Central Manager HA configuration file
      when: central_manager_list | length == 1
      ansible.builtin.file:
        path: "{{ condor_config_root }}/config.d/{{ cm_ha_config_file }}"
        state: absent
      notify:
      - Reload HTCondor
  - name: Configure HTCondor SchedD
    when: htcondor_role == 'get_htcondor_submit'
    block:
    - name: Create SchedD configuration file
      ansible.builtin.copy:
        dest: "{{ condor_config_root }}/config.d/{{ schedd_config_file }}"
        mode: 0644
        content: |
          SCHEDD_INTERVAL=30
          TRUST_UID_DOMAIN=True
          SUBMIT_ATTRS=RunAsOwner
          RunAsOwner=True
      notify:
      - Reload HTCondor
    - name: Create IDTOKEN to advertise access point
      ansible.builtin.shell: |
        umask 0077
        condor_token_create -authz READ -authz ADVERTISE_MASTER \
          -authz ADVERTISE_SCHEDD -identity condor@{{ trust_domain }} \
          -token condor@{{ trust_domain }}
      args:
        creates: "{{ condor_config_root }}/tokens.d/condor@{{ trust_domain }}"
  - name: Configure HTCondor StartD
    when: htcondor_role == 'get_htcondor_execute'
    block:
    - name: Create StartD configuration file
      ansible.builtin.copy:
        dest: "{{ condor_config_root }}/config.d/{{ execute_config_file }}"
        mode: 0644
        content: |
          use feature:PartitionableSlot
          use feature:CommonCloudAttributesGoogle("-c created-by")
          TRUST_UID_DOMAIN=True
          STARTER_ALLOW_RUNAS_OWNER=True
      notify:
      - Reload HTCondor
    - name: Create IDTOKEN to advertise execute point
      ansible.builtin.shell: |
        umask 0077
        condor_token_create -authz READ -authz ADVERTISE_MASTER \
          -authz ADVERTISE_STARTD -identity condor@{{ trust_domain }} \
          -token condor@{{ trust_domain }}
      args:
        creates: "{{ condor_config_root }}/tokens.d/condor@{{ trust_domain }}"
  - name: Start HTCondor
    ansible.builtin.service:
      name: condor
      state: started
      enabled: true
  - name: Inform users
    changed_when: false
    ansible.builtin.shell: |
      set -e -o pipefail
      wall "******* HTCondor system configuration complete ********"
  handlers:
  - name: Reload HTCondor
    ansible.builtin.service:
      name: condor
      state: reloaded
